{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"local batchsize = 57000 --export How many to run\nlocal inc_batch = 500 --export Stagger Machine Batch Size.\n\nsystem.print(\"Batch : \"..batchsize..\" Inc : \"..inc_batch)\n\n-- Copy the First Machine's Schematic\nlocal copy_schematic = slot1.getCurrentSchematic()\nif copy_schematic == nil or copy_schematic == 0 then\n    system.print(\"Set First Machine Schematic!\")\n    return\nend\n\n-- Apply the First Machine's Schematic and start the Batches.\nlocal machines = {slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10}\nfor i,machine in ipairs(machines) do\n     -- Stagger Batches to help with lag?\n\tlocal current_batchsize = batchsize + (i-1) * inc_batch\n     if machine == nil then\n        system.print(\"Empty Slot\")\n     end\n     -- Check that the machines are running a schematic.\n     local current_schematic =  machine.getCurrentSchematic()\n\tif current_schematic == nil or current_schematic == 0 then\n        machine.setCurrentSchematic(copy_schematic)\n     end\n     if current_schematic ~= copy_schematic then\n        system.print(\"Changing Schematic\")\n        machine.setCurrentSchematic(copy_schematic)\n     end\n      \n\t-- Make sure that the machine is running.\n     local status = machine.getStatus()\n     if status ~= \"RUNNING\" or always_restart then\n          machine.startAndMaintain(batchsize + (i-1)*inc_batch)\n     end\n     -- TODO FIX: PENDING\n\n\t-- Status.\n     system.print(\"Slot\"..i..\" --- Status: \"..machine.getStatus()\n        ..\" --- Eff: \"..machine.getEfficiency())\nend\nunit.exit()","filter":{"args":[],"signature":"start()","slotKey":"-2"},"key":"0"}],"methods":[],"events":[]}
