{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"if console_debug then\n    system.print(\"boosting...\")\nend\n    \nlocal batchsize = 5000 --export How many to run\nlocal inc_batch = 0 --export Stagger Machine Batch Size.\n\ndatabank.setIntValue(\"batchsize\", batchsize)\ndatabank.setIntValue(\"inc_batch\", inc_batch)\n\nlocal saved_schematic = 0\n\n-- Copy the First Machine's Schematic\nlocal schematic = machines[1].getCurrentSchematic()\nif databank.hasKey(\"schematic\") then\n    if console_debug then\n        system.print(\"reading databank for schematic...\")\n    end\n    saved_schematic = databank.getIntValue(\"schematic\")\nend\nif schematic == nil or schematic == 0 then\n    if saved_schematic ~= 0 then\n        system.print(\"loading saved schematic from databank\")\n        schematic = saved_schematic\n    else\n        system.print(\"Load schematic on the first machine!\")\n        return\n    end\n-- Keep the databank up to date.\nelse\n    databank.setIntValue(\"schematic\", schematic)\nend    \n\nfor i,machine in ipairs(machines) do\n     -- Stagger Batches to show eff.\n\tlocal current_batchsize = batchsize + (i-1) * inc_batch\n\n     -- Check that the machines are running a schematic.\n     local current_schematic =  machine.getCurrentSchematic()\n\tif current_schematic == nil or current_schematic == 0 then\n        machine.setCurrentSchematic(copy_schematic)\n     end\n      \n\t-- Make sure that the machine is running.\n     local status = machine.getStatus()\n     if status ~= 2 then -- \"RUNNING\" then\n          machine.startMaintain(batchsize + (i-1)*inc_batch)\n     end\n\n\t-- Status.\n     if debug == True then \n         system.print(\"Slot\"..i..\" --- Status: \"..machine.getStatus()\n        ..\" --- Eff: \"..machine.getEfficiency())\n     end\nend\n\nunit.stopTimer(\"boost\")","filter":{"args":[{"value":"boost"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"0"},{"code":"batchsize = databank.getIntValue(\"batchsize\")\ninc_batch = databank.getIntValue(\"inc_batch\")\n\nfor i,machine in ipairs(machines) do\n     -- Stagger Batches to show eff.\n\tlocal current_batchsize = batchsize + (i-1) * inc_batch\n      \n\t-- Make sure that the machine is running.\n     local status = machine.getStatus()\n     if status ~= 2 then -- \"RUNNING\" then\n          machine.startMaintain(batchsize + (i-1)*inc_batch)\n     else\n          system.print(\"ERROR! Machine Not Running!\")\n     end\n\n\t-- Status.\n     system.print(\"Slot\"..i..\" --- Status: \"..machine.getStatus()\n        ..\" --- Eff: \"..machine.getEfficiency())\nend\n\nunit.stopTimer(\"unstuck\")","filter":{"args":[{"value":"unstuck"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"local fontsize = 7 --export\n\nfunction format_int(number)\n\n  local i, j, minus, int, fraction = tostring(number):find('([-]?)(%d+)([.]?%d*)')\n\n  -- reverse the int-string and append a comma to all blocks of 3 digits\n  int = int:reverse():gsub(\"(%d%d%d)\", \"%1,\")\n\n  -- reverse the int-string back remove an optional comma and put the \n  -- optional minus and fractional part back\n  return minus .. int:reverse():gsub(\"^,\", \"\") .. fraction\nend   \n\n\n-- MAIN\nscreen.activate()\nscreen.clear()\n\nfor i=1,5 do\n    if machines[i] == nil then\n        return\n    end\n    \n    x = 20\n    y = (i-1) * 40\n    status = machines[i].getStatus()\n    eff = machines[i].getEfficiency() \n    show_details = true\n\n    if status == 1 then -- \"\"\n        light.setColor(200,0,0);\n        status = \"Stopped\"\n        show_details = false\n    elseif status == 2 then -- \"RUNNING\" then\n        light.setColor(0,200,0)\n        unit.stopTimer(\"screen\")\n        unit.hideWidget()\n        status = \"Running\"\n        show_details = true\n    elseif status == 3 then -- \"JAMMED_MISSING_INGREDIENT\" then\n        status = \"Missing Material\"\n        light.setColor(200,200,0)\n        show_details = false\n        light.setColor(0,100+200*eff,0)\n    elseif status == 4 then -- \"JAMMED_OUTPUT_FULL\" then\n        status = \"FULL\"\n        light.setColor(100,100,0)\n        show_details = true\n    elseif status == 5 then -- \"JAMMED_NO_OUTPUT_CONTAINER\" \n        status = \"LINK ISSUE\"\n        light.setColor(255,0,0)\n        show_details = false\n        unit.stopTimer(\"screen\")\n        unit.hideWidget()\n    elseif status == 6 then -- \"PENDING\" then\n        unit.stopTimer(\"screen\")\n        unit.hideWidget()\n        light.setColor(0,10+200*eff, 0)\n        status = \"Pending\"\n        show_details = true\n    else\n        status = \"Unknown Status: \"..status\n        light.setColor(200,200,0)\n        show_details = false\n    end\n    \n    screen.addText(2, y,fontsize,\"machine [\"..i..\"] : \"..status)  \n    \n    if show_details == true then\n        eff_per = math.floor(eff * 1000 + 0.5)/10\n        details = \"cycles: \"..\n        machines[i].getCyclesCompleted()--SinceStartup()..\n        \" eff: \"..format_int(eff_per)..\" %\"\n        screen.addText(2, y+20, fontsize, details)\n    end\nend\n\n-- unit.stopTimer(\"screen\")","filter":{"args":[{"value":"screen"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"console_debug = False --export Debug Text\n\nsystem.print(\"\")\nsystem.print(\"\")\nsystem.print(\"\")\nsystem.print(\"--------------------------\")\nsystem.print(\"Spaceman's Factory Manager\")\nsystem.print(\"--------------------------\")\nsystem.print(\"--------------------------\")\nsystem.print(\"version 0.30.2.1\")\nsystem.print(\"last update 6.17.2022\")\nsystem.print(\"--------------------------\")\nsystem.print(\"\")\n    \ndatabank = nil\nlight = nil\nscreen = nil\nmachines = {}\nmachine_count = 0\nexit = false\n\nif slot1 ~= nil then\n    databank = slot1\nelse\n    system.print(\"missing link to databank\")\n    exit = true\nend\n\nif slot2 ~= nil then\n    light = slot2\nelse\n    system.print(\"missing link to light\")\n    exit = true\nend\n\nif slot3 ~= nil then\n    screen = slot3\n    screen.activate()\n    screen.clear()\n    screen.addText(10, 40, 10, \"Loading...\")\nelse\n    system.print(\"missing link to screen\")\n    exit = true\nend\n\nif slot4 ~= nil then\n    table.insert(machines, slot4)\n    machine_count = 1\nelse\n    system.print(\"missing link to machine(s)\")\n    exit = true\n    unit.exit()\nend\n\nif slot5 ~= nil then\n    table.insert(machines, slot5)\n    machine_count = 2\nend\nif slot6 ~= nil then\n    table.insert(machines, slot6)\n    machine_count = 3\nend\nif slot7 ~= nil then\n    table.insert(machines, slot7)\n    machine_count = 4\nend\nif slot8 ~= nil then\n    table.insert(machines, slot8)\n    machine_count = 5\nend\nif slot9 ~= nil then\n    table.insert(machines, slot9)\n    machine_count = 6\nend\nif slot10 ~= nil then\n    table.insert(machines, slot10)\n    machine_count = 7\nend\n\nif exit then\n    system.print(\"exiting due to setup error...\")\n    return\nend\n\njson = require (\"dkjson\")\n--pn = player.getID() --database.getPlayer(--player.getID())-- unit.getMasterPlayerId())\ncurrent_player = player_name\n\nlocal boost_player_id = \"space_man\" --export Who boost's, while everyone else just mointors.\n\nif console_debug then\n system.print(\"boost player: \"..boost_player_id)\nend\n    \nscreen.clear()\nscreen.addText(10, 50, 10, \"Welcome... \"..current_player)\n\nif machine_count > 0 then\n    if current_player == boost_player_id then\n        system.print(\"setting up machines...\")\n        unit.setTimer(\"boost\", 1)\n        unit.setTimer(\"unstuck\", 2)\n        unit.setTimer(\"screen\", 3)\n    else\n        system.print(\"monitoring machines...\")\n        unit.setTimer(\"screen\", 1)\n    end\nend\n\nunit.setTimer(\"test\", 1)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"3"},{"code":"player_name = player.getName()\nsystem.print(\"Hullo... ..\"..player_name)","filter":{"args":[],"signature":"onStart()","slotKey":"-3"},"key":"4"}],"methods":[],"events":[]}
