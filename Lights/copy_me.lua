{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"screen","type":{"events":[],"methods":[]}},"2":{"name":"bl","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-- version 1.0\nlocal refresh = 1 --export timer speed\n\noldCoords = vec3(core.getConstructWorldPos())\noldTime = system.getTime()\noldSpeed = 0\n\nif screen ~= nil then\n  screen.activate()\nend\n\nunit.setTimer(\"brake\", refresh)\nunit.hide()","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"local accel_upper = 20 --export\nlocal accel_lower = -20 --export\n\nfunction lights(r,g,b)\n    light = {bl}\n    for i=1,10 do \n        if light[i] ~= nil then\n        \tlight[i].setRGBColor(r,g,b)\n        \tlight[i].activate()\n        end\n    end\n    return\nend\n\nlocal speed = vec3(core.getVelocity()):len()\nspeed = speed*3.6\n\nlocal newCoords = vec3(core.getConstructWorldPos())\n\nlocal time = system.getTime()\nlocal elapsedTime = time - oldTime\noldTime = time\n\nlocal distance = (newCoords - oldCoords):len()\n\nlocal measuredSpeed = distance*3.6/elapsedTime\n\noldCoords = newCoords\n\nlocal accel = speed - oldSpeed\noldSpeed = speed\n--accel = math.floor(10*accel)/10\n\nif screen ~= nil then\n    local fontsize = 7\n    screen.clear()\n    \n    screen.addText(7,10,fontsize,\"Speed: \"..math.floor(10*speed)/10)\n    screen.addText(7,30,fontsize,\"Time: \"..elapsedTime)\n    screen.addText(7,60,fontsize,\"Accel: \"..accel)    \nend\n\n-- Green/Neutral/Brake\n\nif accel > accel_upper then\n    lights(0,200,0)\nelseif accel > accel_lower then\n    lights(100,100,100)\nelse\n    lights(200,0,0)\nend","filter":{"args":[{"value":"brake"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"if screen ~= nil then\n    screen.deactivate()\nend","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"2"}],"methods":[],"events":[]}